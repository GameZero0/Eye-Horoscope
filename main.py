import telebot
from telebot import types
import sqlite3
import openai

# –í—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à API-–∫–ª—é—á OpenAI –∏ —Ç–æ–∫–µ–Ω Telegram –±–æ—Ç–∞
openai.api_key = 'sk-G_BVvS_32Akmf1XeBalsv8dUEVXxzF1V98svSq25pcT3BlbkFJ8F5OurR6rg_oIlosGn-064amPX0-6QdW-kjWRXjdUA'
bot = telebot.TeleBot("7388261265:AAFnEVEYSheetWFzoWbRYO1eVLn3I5x7avs")

# –ò–º—è —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_FILE = "database.sql"

def initialize_db():
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            user_id INTEGER UNIQUE,
            username TEXT,
            birth_date TEXT,
            city TEXT,
            gender TEXT
        )
    """)
    connection.commit()
    connection.close()

@bot.message_handler(func=lambda message: message.text == 'üåå –ú–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞')
def zodiac_signs(message):
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()

    cursor.execute("SELECT birth_date, city, gender FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    connection.close()

    if user_data:
        birth_date, city, gender = user_data

        prompt = f"""
        –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date}, –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å {city} –∏ –ø–æ–ª {gender}, –ø–æ –ó–∞–ø–∞–¥–Ω–æ–º—É –≥–æ—Ä–æ—Å–∫–æ–ø—É –≤—ã:..., 
        –ø–æ –ö–∏—Ç–∞–π—Å–∫–æ–º—É –≤—ã:..., –ø–æ –í–µ–¥–∏—á–µ—Å–∫–æ–º—É –≤—ã:..., –ø–æ –ú–∞–π—è –≤—ã:..., –ø–æ –Ø–ø–æ–Ω—Å–∫–æ–º—É –≤—ã:... –±–µ–∑ –ª–∏—à–Ω–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏ –≤ —Å—Ç–æ–ª–±–∏–∫ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        """

        zodiac_response = openai.ChatCompletion.create(
            model='gpt-4',
            messages=[{"role": "user", "content": prompt}],
            max_tokens=150,
            temperature=0.7
        )

        response_text = zodiac_response.choices[0].message['content']
        bot.send_message(message.chat.id, response_text)
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@bot.message_handler(commands=['start'])
def start(message):
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()

    cursor.execute("SELECT birth_date, city, gender FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    connection.close()

    if user_data:
        show_menu(message)
    else:
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–¥–µ–Ω—å-–º–µ—Å—è—Ü-–≥–æ–¥)")
        bot.register_next_step_handler(message, userdate)

def show_menu(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø')
    btn2 = types.KeyboardButton('ü§ç –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')
    markup.row(btn1, btn2)
    btn3 = types.KeyboardButton('‚úíÔ∏è –¶–∏—Ç–∞—Ç—ã')
    btn4 = types.KeyboardButton('üíº –†–∞–±–æ—Ç–∞')
    markup.row(btn3, btn4)
    btn5 = types.KeyboardButton('üìÇ –î–∞–Ω–Ω—ã–µ')
    markup.row(btn5)

    file = open('./Circle.jpg', 'rb')
    bot.send_photo(message.chat.id, file, reply_markup=markup)

    with open('./Main_Page.txt', 'r', encoding='utf-8') as file:
        content = file.read()
    bot.send_message(message.chat.id, content, reply_markup=markup)

def userdate(message):
    numbers = message.text.strip()
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≥–æ—Ä–æ–¥.")
    bot.register_next_step_handler(message, lambda msg: usercity(msg, numbers))

def usercity(message, numbers):
    city = message.text.strip()
    bot.send_message(message.chat.id, "–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –≤–∞—à –ø–æ–ª (–º—É–∂—Å–∫–æ–π/–∂–µ–Ω—Å–∫–∏–π).")
    bot.register_next_step_handler(message, lambda msg: usergender(msg, numbers, city))

def usergender(message, numbers, city):
    gender = message.text.strip().capitalize()
    if gender not in ["–ú—É–∂—Å–∫–æ–π", "–ñ–µ–Ω—Å–∫–∏–π"]:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø–æ–ª –∫–∞–∫ '–º—É–∂—Å–∫–æ–π' –∏–ª–∏ '–∂–µ–Ω—Å–∫–∏–π'.")
        bot.register_next_step_handler(message, lambda msg: usergender(msg, numbers, city))
        return
    save_to_db(message, numbers, city, gender)
    bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    show_menu(message)

def save_to_db(message, birth_date, city, gender):
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()
    cursor.execute("INSERT OR REPLACE INTO users (user_id, username, birth_date, city, gender) VALUES (?, ?, ?, ?, ?)",
                   (message.from_user.id, message.from_user.username, birth_date, city, gender))
    connection.commit()
    connection.close()

@bot.message_handler(func=lambda message: message.text == 'üìÇ –î–∞–Ω–Ω—ã–µ')
def show_user_data(message):
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()
    cursor.execute("SELECT birth_date, city, gender FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    connection.close()

    if user_data:
        birth_date, city, gender = user_data
        bot.send_message(message.chat.id, f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {birth_date}\n–ì–æ—Ä–æ–¥: {city}\n–ü–æ–ª: {gender}")
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@bot.message_handler(func=lambda message: message.text == 'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø')
def choose_period(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton('–ù–∞ –°–µ–≥–æ–¥–Ω—è')
    btn2 = types.KeyboardButton('–ù–∞ –ù–µ–¥–µ–ª—é')
    markup.row(btn1, btn2)
    btn3 = types.KeyboardButton('–ù–∞ –ú–µ—Å—è—Ü')
    btn4 = types.KeyboardButton('–ù–∞ –ì–æ–¥')
    markup.row(btn3, btn4)
    btn5 = types.KeyboardButton('üåå –ú–æ–π –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞')
    markup.row(btn5)
    btn6 = types.KeyboardButton('‚óÄÔ∏è –ù–∞–∑–∞–¥')
    markup.row(btn6)

    file = open('./Signs.jpg', 'rb')
    bot.send_photo(message.chat.id, file,'üîÆ –ì–æ—Ä–æ—Å–∫–æ–ø: –£–∑–Ω–∞–π —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –≥–æ—Ä–æ—Å–∫–æ–ø –Ω–∞ —Å–µ–≥–æ–¥–Ω—è, —á—Ç–æ–±—ã –±—ã—Ç—å –≤ –∫—É—Ä—Å–µ, —á—Ç–æ –∑–≤–µ–∑–¥—ã –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞—é—Ç –¥–ª—è —Ç–µ–±—è.', reply_markup=markup)

    @bot.message_handler(func=lambda message: message.text == '‚óÄÔ∏è –ù–∞–∑–∞–¥')
    def go_back(message):
        show_menu(message)




@bot.message_handler(func=lambda message: message.text in ['–ù–∞ –°–µ–≥–æ–¥–Ω—è', '–ù–∞ –ù–µ–¥–µ–ª—é', '–ù–∞ –ú–µ—Å—è—Ü', '–ù–∞ –ì–æ–¥'])
def send_horoscope(message):
    period_map = {
        '–ù–∞ –°–µ–≥–æ–¥–Ω—è': 'today',
        '–ù–∞ –ù–µ–¥–µ–ª—é': 'week',
        '–ù–∞ –ú–µ—Å—è—Ü': 'month',
        '–ù–∞ –ì–æ–¥': 'year'
    }

    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()
    cursor.execute("SELECT birth_date, city, gender FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    connection.close()

    if user_data:
        birth_date, city, gender = user_data
        prompt = f"""
        –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date}, –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å {city} –∏ –ø–æ–ª {gender},
        –≤–∞—à–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –≤—ã–≥–ª—è–¥–∏—Ç —Ç–∞–∫:
        –û–±—ä–µ–¥–∏–Ω–∏ –ó–∞–ø–∞–¥–Ω—ã–π, –ö–∏—Ç–∞–π—Å–∫–∏–π, –í–µ–¥–∏—á–µ—Å–∫–∏–π, –ú–∞–π—è –∏ –Ø–ø–æ–Ω—Å–∫–∏–π –≥–æ—Ä–æ—Å–∫–æ–ø –∏ —Å–¥–µ–ª–∞–π –µ–¥–∏–Ω–æ–µ –Ω–µ –±–æ–ª—å—à–æ–µ –∑–∞–∫–æ–Ω—á–µ–Ω–æ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –Ω–∞ {period_map[message.text]} –Ω–µ —É–∫–∞–∑—ã–≤–∞—è –∫–∞–∫–æ–π –≥–æ—Ä–æ—Å–∫–æ–ø.
        """

        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "user", "content": prompt}
            ],
            max_tokens=500
        )

        bot.send_message(message.chat.id, response.choices[0].message['content'].strip())
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@bot.message_handler(func=lambda message: message.text == '‚úíÔ∏è –¶–∏—Ç–∞—Ç—ã')
def send_quotes(message):
    quotes_response = openai.ChatCompletion.create(
        model='gpt-4',
        messages=[{"role": "user", "content": "–ù–∞–ø–∏—à–∏ –∫—Ä–∞—Ç–∫—É—é —É–º–Ω—É—é —Ü–∏—Ç–∞—Ç—É."}],
        temperature=0.7,
        max_tokens=150,
        frequency_penalty=0,
        presence_penalty=0
    )
    quote = quotes_response.choices[0].message['content']
    bot.send_message(message.chat.id, quote)

@bot.message_handler(func=lambda message: message.text == 'ü§ç –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏')
def compatibility(message):
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()

    cursor.execute("SELECT birth_date, city, gender FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    connection.close()

    if user_data:
        birth_date, city, gender = user_data

        prompt = f"""
        –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date}, –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å {city} –∏ –ø–æ–ª {gender}, –≤–∞–º –ø–æ–¥–∞–π–¥–µ—Ç —Ç–∞–∫–æ–π –ø—Ä–∞—Ç–Ω–µ—Ä (–ü—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∑–Ω–∞–∫ –∑–æ–¥–∏–∞–∫–∞ –ø–æ –ó–∞–ø–∞–¥–Ω–æ–º—É, –ö–∏—Ç–∞–π—Å–∫–æ–º—É, –í–µ–¥–∏—á–µ—Å–∫–æ–º—É)–≤–æ—Ç –ø–æ—á–µ–º—É (–ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–µ –ø—Ä–∏—á–∏–Ω—ã –ø–æ—á–µ–º—É —ç—Ç–æ—Ç –ø–∞—Ä—Ç–Ω–µ—Ä –ø–æ–¥—Ö–æ–¥—è—â–∏–π)
        """

        compatibility_response = openai.ChatCompletion.create(
            model='gpt-4',
            messages=[{"role": "user", "content": prompt}],
            max_tokens=600,
            temperature=0.7
        )

        response_text = compatibility_response.choices[0].message['content']
        bot.send_message(message.chat.id, response_text)
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

@bot.message_handler(func=lambda message: message.text == 'üíº –†–∞–±–æ—Ç–∞')
def job_suggestion(message):
    connection = sqlite3.connect(DB_FILE)
    cursor = connection.cursor()

    cursor.execute("SELECT birth_date, city, gender FROM users WHERE user_id = ?", (message.from_user.id,))
    user_data = cursor.fetchone()
    connection.close()

    if user_data:
        birth_date, city, gender = user_data

        prompt = f"""
        –£—á–∏—Ç—ã–≤–∞—è –≤–∞—à—É –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è {birth_date}, –≥–æ—Ä–æ–¥ –≤ –∫–æ—Ç–æ—Ä–æ–º –≤—ã —Ä–æ–¥–∏–ª–∏—Å—å {city} –∏ –ø–æ–ª {gender}, –í–∞–º –ª—É—á—à–µ –≤—Å–µ–≥–æ –ø–æ–¥–æ–π–¥–µ—Ç —ç—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è (–Ω–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ ) –ø–æ—Ç–æ–º—É —á—Ç–æ (–Ω–∞–ø–∏—à–∏ –ø—Ä–∏—á–∏–Ω—ã)
        """

        job_response = openai.ChatCompletion.create(
            model='gpt-4',
            messages=[{"role": "user", "content": prompt}],
            max_tokens=500,
            temperature=0.7
        )

        response_text = job_response.choices[0].message['content']
        bot.send_message(message.chat.id, response_text)
    else:
        bot.send_message(message.chat.id, "–î–∞–Ω–Ω—ã–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /start.")

initialize_db()
bot.polling()
